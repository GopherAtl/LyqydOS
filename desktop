local deskID = process.id()
local deskRedirect = process.windowCompositor:newBuffer()
if #process.windowCompositor.bufferStack > 1 then
	--move desktop to bottom
	table.insert(process.windowCompositor.bufferStack, 1, table.remove(process.windowCompositor.bufferStack))
end

process.addHook({"key", 59})

local runHistory = {}
if fs.exists("/LyqydOS/.lyqrunhistory") then
	local histFile=io.open("/LyqydOS/.lyqrunhistory","r")
	if histFile then
		for line in histFile:lines() do
			table.insert(runHistory, line)
		end
		histFile:close()
	end
end

local function getWindowDimensions(winPath)
	local winDims = io.open("/LyqydOS/.lyqwin", "r")
	if winDims then
		for line in winDims:lines() do
			local x, y, w, h, max, path = string.match(line, "(%d+),(%d+),(%d+),(%d+),(%a+),(.*)")
			if path == winPath then
				winDims:close()
				return x, y, w, h, max
			end
		end
		winDims:close()
	end
end

local function runProgram()
	local desk = process.id()
	local dProc = process.list[desk]
	dProc.special = true
	dProc.window = window.new(30, 3, 2, 2, "Run Program", windowCompositor:newBuffer())
	dProc.window:setType("menu")
	dProc.window:setTheme(LyqydOS.userTheme)
	process.focusWindow = desk

	local _old = term.redirect(dProc.window.redirect)
	term.setTextColor(colors.white)
	term.setBackgroundColor(colors.black)
	write("> ")
	local success, line = pcall(read, nil, runHistory)
	--clean up window
	if _old then
		term.redirect(_old)
	else
		term.restore()
	end

	dProc.window:destroy()
	dProc.window = nil
	dProc.special = nil
	if success then
		--don't save empty or repeated lines
		if line ~= "" and (#runHistory == 0 or line ~= runHistory[#runHistory]) then
			--should never be able to get above 255, but just in case, the while doesn't hurt
			table.insert(runHistory,line)		
			while #runHistory>255 do
				table.remove(runHistory, 1)
			end
			--update history on disk
			local histFile=io.open("/LyqydOS/.lyqrunhistory","w")
			if histFile then
				for i=1, #runHistory do
					histFile:write(runHistory[i].."\n")
				end
				histFile:close()
			end
		end
		if line ~= "" then
			local args = {}
			for match in string.gmatch( line, "[^ \t]+" ) do
				table.insert( args, match )
			end
			--fix for previously-changed working directory
			shell.setDir("")
			path = shell.resolveProgram(table.remove(args, 1))
			if path then
				local x, y, w, h, max = getWindowDimensions(path)
				if not x then w, h, x, y, max = 19, 9, 1, 1, "false" end
				local win = window.new(w, h, x, y, fs.getName(path), process.windowCompositor:newBuffer())
				if windowCompositor.target.isColor() then
					win:setType("window")
				end
				win:setTheme(LyqydOS.userTheme)
				if max == "true" then win:maximize() end
				process.new(function() shell.run(path, unpack(args)) end, path, win)
				if coroutine.status(process.list[process.focusWindow].thread) == "dead" then
					process.getFromName("lws"):queue("close_window", process.focusWindow)
				end
			end
		end
	end
end

--set up initial view.
local titlebarFillChar = deskRedirect.isColor() and " " or "="
deskRedirect.clear()
local x, y = deskRedirect.getSize()
deskRedirect.buffer.text[1] = titlebarFillChar.."LyqydOS"..string.rep(titlebarFillChar, x - 8)
if deskRedirect.isColor() then
	deskRedirect.buffer.textColor[1] = "fbbbbbbb"..string.rep("f", x - 8)
	deskRedirect.buffer.backColor[1] = string.rep("8", x)
	for i=2, y do
		deskRedirect.buffer.backColor[i] = string.rep("3", x)
	end
end

local titlebarItems
local tasksClickable

while true do
	local event = {os.pullEventRaw()}
	if event[1] == "redraw" then
		titlebarItems = {}
		for i=1, #process.list do
			if process.list[i] and #process.list[i].windows >= 1 and not process.list[i].special then
				local tBarEntry = {pID = i, text = process.list[i].windows[#process.list[i].windows].caption}
				table.insert(titlebarItems, tBarEntry)
			end
		end
		local taskText = ""
		tasksClickable = 0
		local usableWidth = x - 10
		for eNum, eInfo in ipairs(titlebarItems) do
			if #taskText + 9 > usableWidth then
				if #taskText > 9 then
					taskText = string.sub(taskText, 1, -10).."More... |"
				end
				break
			end
			local str = string.sub(eInfo.text, 1, 8)
			str = str..string.rep(" ", 8 - #str)
			if taskText == "" then taskText = "|" end
			taskText = taskText..str.."|"
			tasksClickable = tasksClickable + 1
		end
		deskRedirect.buffer.text[1] = titlebarFillChar.."LyqydOS"..titlebarFillChar..taskText..string.rep(titlebarFillChar, x - (#taskText + 9))
	elseif event[1] == "run_program" then
		runProgram()
	elseif event[1] == "key" and event[2] == 59 then
		runProgram()
	elseif event[1] == "mouse_click" then
		if event[4] == 1 then
			--click on titlebar with no window covering it.
			if event[3] > 1 and event[3] < 9 and event[2] == 1 then
				--clicked on the LyqydOS button
				runProgram()
			elseif event[3] > 9 then
				--clicked on task bar.
				clickItem = math.floor((event[3] - 1) / 9)
				if (event[3] - 10 ) % 9 ~= 0 and clickItem <= tasksClickable then
					--they clicked on the name itself, not the boundary line.
					if clickItem == tasksClickable and clickItem < #titlebarItems then
						--display the window choice dialog
						if process.list[process.focusWindow] then
							process.getFromName("lws"):queue("select_window")
						end
					else
						local proc = process.list[process.focusWindow]
						local win = proc.windows[#proc.windows]
						if process.focusWindow ~= titlebarItems[clickItem].pID then
							process.focusWindow = titlebarItems[clickItem].pID
						end
						proc:toFront()
						if win.minimized then win:unMinimize() end
						if event[2] == 2 then
							--they right-clicked, so let's also display the window action menu.
							process.getFromName("lws"):queue("window_action", process.focusWindow, win)
						end
					end
				end
			end
		end
	elseif event[1] == "service_stop" then
		process.windowCompositor:removeBuffer(deskRedirect.buffer)
		process.removeHook({"key", 59})
	end
end
