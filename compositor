local Compositor = {
	newBuffer = function(self)
		local _redirect = framebuffer.new(self.x, self.y, self.target.isColor())
		local redirect = {}
		for k, v in pairs(_redirect) do
			if type(k) == "string" and type(v) == "function" then
				redirect[k] = function(...)
					local result = {_redirect[k](...)}
					if not self.deferDraw then self:draw() end
					return unpack(result)
				end
			else
				redirect[k] = _redirect[k]
			end
		end

		table.insert(self.bufferStack, redirect.buffer)

		return redirect
	end,
	draw = function(self, mode)
		if #self.bufferStack > 0 then
			local sizeX, sizeY = self.target.getSize()
			local redirect = framebuffer.new(sizeX, sizeY, self.target.isColor())
			local finalBuffer = redirect.buffer
			if mode ~= "cursor" then
				for i=1, self.y do
					finalBuffer.text[i] = string.rep(" ", self.x)
					finalBuffer.textColor[i] = string.rep("0", self.x)
					finalBuffer.backColor[i] = string.rep("f", self.x)
				end
				for i=1, #self.bufferStack do
					local layer = self.bufferStack[i]
					if layer.minY > 0 then
						local preStop = layer.minX - 1
						local preStart = math.min(1, preStop)
						local postStart = layer.maxX + 1
						local postStop = self.x
						local j = layer.minY
						repeat
							finalBuffer.text[j] = string.sub(string.sub(finalBuffer.text[j], preStart, preStop)..string.sub(layer.text[j], layer.minX, layer.maxX)..string.sub(finalBuffer.text[j], postStart, postStop), 1, self.x)
							finalBuffer.textColor[j] = string.sub(string.sub(finalBuffer.textColor[j], preStart, preStop)..string.sub(layer.textColor[j], layer.minX, layer.maxX)..string.sub(finalBuffer.textColor[j], postStart, postStop), 1, self.x)
							finalBuffer.backColor[j] = string.sub(string.sub(finalBuffer.backColor[j], preStart, preStop)..string.sub(layer.backColor[j], layer.minX, layer.maxX)..string.sub(finalBuffer.backColor[j], postStart, postStop), 1, self.x)
							j = j + 1
						until j > layer.maxY
					end
				end
			end
			local top = self.bufferStack[#self.bufferStack]
			finalBuffer.cursorX = top.cursorX
			finalBuffer.cursorY = top.cursorY
			finalBuffer.curTextColor = top.curTextColor
			finalBuffer.curBackColor = top.curBackColor
			--ensure cursor is inside opaque area before setting blink.
			if top.cursorX >= top.minX and top.cursorX <= top.maxX and top.cursorY >= top.minY and top.cursorY <= top.maxY then
				finalBuffer.cursorBlink = top.cursorBlink
			else
				finalBuffer.cursorBlink = false
			end
			--farm out actual drawing procedures to framebuffer API.
			local _old = term.redirect(self.target)
			term.setCursorBlink(false)
			self.currentBuffer = framebuffer.draw(finalBuffer, self.currentBuffer)
			if _old then
				term.redirect(_old)
			else
				term.restore()
			end
		end
	end,
	toFront = function(self, pos)
		table.insert(self.bufferStack, (table.remove(self.bufferStack, pos)))
		if not self.deferDraw then self:draw() end
	end,
	removeBuffer = function(self, buffer)
		local pos = nil
		for i = 1, #self.bufferStack do
			if self.bufferStack[i] == buffer then
				table.remove(self.bufferStack, i)
				break
			end
		end
		if not self.deferDraw then self:draw() end
	end,
}

local cmetatable = {
	__index = Compositor,
}

function new(target)
	local comp = {
		bufferStack = {},
		target = target or term.native,
		currentBuffer = {text = {}, textColor = {}, backColor = {}},
		deferDraw = false
	}
	setmetatable( comp, cmetatable )
	if comp.target.getSize() then
		comp.x, comp.y = comp.target.getSize()
	else
		return nil
	end
	for i=1, comp.y do
		comp.currentBuffer.text[i] = string.rep(" ", comp.x)
		comp.currentBuffer.textColor[i] = string.rep("0", comp.x)
		comp.currentBuffer.backColor[i] = string.rep("f", comp.x)
	end
	return comp
end
