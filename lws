local function saveDimensions(proc)
	--saves window dimensions when closing windows
	if proc.path then
		local wInfo = {}
		if proc.windows[#proc.windows].maximized then
			wInfo.x = proc.windows[#proc.windows].normalSize.x
			wInfo.y = proc.windows[#proc.windows].normalSize.y
			wInfo.w = proc.windows[#proc.windows].normalSize.w
			wInfo.h = proc.windows[#proc.windows].normalSize.h
		else
			wInfo.x = proc.windows[#proc.windows].x
			wInfo.y = proc.windows[#proc.windows].y
			wInfo.w = proc.windows[#proc.windows].w
			wInfo.h = proc.windows[#proc.windows].h
		end
		wInfo.max = tostring(proc.windows[#proc.windows].maximized)
		local lines = {}
		if fs.exists("/LyqydOS/.lyqwin") then
			local dimsFile = io.open("/LyqydOS/.lyqwin", "r")
			if dimsFile then
				for line in dimsFile:lines() do
					if string.match(line, "%d+,%d+,%d+,%d+,%a+,(.*)") ~= proc.path then
						table.insert(lines, line)
					end
				end
				dimsFile:close()
			end
		end
		table.insert(lines, wInfo.x..","..wInfo.y..","..wInfo.w..","..wInfo.h..","..wInfo.max..","..proc.path)

		winDims = io.open("/LyqydOS/.lyqwin", "w")
		if winDims then
			for _, line in ipairs(lines) do
				winDims:write(line.."\n")
			end
			winDims:close()
		end
	end
end

local function windowAction(pID, win)
	--index 2 should be the pID and 3 should be the window, forward compat for child windows.
	if process.list[process.focusWindow] and not process.list[process.focusWindow].special then
		local parent = process.focusWindow
		local proc = process.list[parent]
		local lws = process.id()
		process.list[lws].special = true
		local x, y
		if win.minimized then
			x, y = 1, 2
		else
			x, y = win.x, win.y + 1
		end
		process.list[lws].window = window.new(15, 9, x, y, "Action Menu", process.windowCompositor:newBuffer())
		process.list[lws].window:setType("menu")
		if term.isColor() then
			process.list[lws].window:setTheme("pretty")
		end
		process.focusWindow = lws
		local _old = term.redirect(process.list[process.focusWindow].window.redirect)
		local success, selection = pcall(menu.select, {"Restore", "Move", "Resize", "Minimize", "Maximize", "Close", "Cancel"})
		if _old then
			term.redirect(_old)
		else
			term.restore()
		end
		process.list[lws].window:destroy()
		process.list[lws].window = nil
		process.list[lws].special = nil
		if success then
			if selection == 1 then
				--restore
				if win.maximized then
					win:restore()
					proc:queue("window_resize")
				elseif win.minimized then
					win:unMinimize()
					proc:toFront(win)
				end
			elseif selection == 2 then
				--move
				while true do
					e, p1, p2, p3 = os.pullEvent()
					if e == "key" then
						if p1 == 200 then
							--up
							win:move(win.x, win.y - 1)
						elseif p1 == 203 then
							--left
							win:move(win.x - 1, win.y)
						elseif p1 == 205 then
							--right
							win:move(win.x + 1, win.y)
						elseif p1 == 208 then
							--down
							win:move(win.x, win.y + 1)
						elseif p1 == 28 then
							--enter
							break
						end
					elseif e == "mouse_click" and p1 == 1 then
						--mouse click
						win:move(p2, p3)
						break
					end
				end
			elseif selection == 3 then
				--resize
				win.maximized = false
				while true do
					e, p1 = os.pullEvent()
					if e == "key" then
						if p1 == 200 then
							--up
							win:resize(win.w, win.h - 1)
							proc:queue("window_resize")
						elseif p1 == 203 then
							--left
							win:resize(win.w - 1, win.h)
							proc:queue("window_resize")
						elseif p1 == 205 then
							--right
							win:resize(win.w + 1, win.h)
							proc:queue("window_resize")
						elseif p1 == 208 then
							--down
							win:resize(win.w, win.h + 1)
							proc:queue("window_resize")
						elseif p1 == 28 then
							--enter
							break
						end
					end
				end
			elseif selection == 4 then
				--minimize
				if not win.minimized then
					win:minimize()
					--also move the window to the bottom of the buffer stack.
					proc:toBack()
				end
			elseif selection == 5 then
				--maximize
				if not win.maximized then
					win:maximize()
					if win.minimized then win:unMinimize() end
					proc:queue("window_resize")
				end
			elseif selection == 6 then
				--close
				saveDimensions(proc)
				win:destroy()
				process.list[parent] = false
				process.focusWindow = nextWindow(1)
				if process.list[process.focusWindow] then
					process.list[process.focusWindow]:toFront()
				end
			end
			process.focusWindow = parent
		end
	end
end

local function windowSelect()
	local oldFocus = process.focusWindow
	local lws = process.id()
	local lwsProc = process.list[lws]
	process.list[lws].special = true
	lwsProc:addWindow(window.new(19, 11, 1, 1, "Select Window", windowCompositor:newBuffer()))
	local lwsWin = lwsProc.windows[#lwsProc.windows]
	lwsWin:setTheme(LyqydOS.userTheme)
	lwsWin:setType("menu")
	process.focusWindow = lws
	local _old = term.redirect(lwsWin.redirect)
	local pList, menuList = {}, {}
	for tNum, tInfo in ipairs(process.list) do
		if tInfo and tInfo.window then
			table.insert(pList, tNum)
			table.insert(menuList, tInfo.window.caption)
		end
	end
	--removes self from list of running programs.
	table.remove(menuList)
	table.remove(pList)
	table.insert(menuList, "Cancel")
	local success, selection = pcall(menu.select, menuList)
	if _old then
		term.redirect(_old)
	else
		term.restore()
	end
	lwsProc:removeWindow(lwsWin)
	process.list[lws].special = nil
	if success then
		if pList[selection] then
			process.focusWindow = pList[selection]
			local proc = process.list[process.focusWindow]
			local win = proc.windows[#proc.windows]
			if win.minimized then win:unMinimize() end
			proc:toFront()
		else
			process.focusWindow = oldFocus
		end
	end
end


local lws = process.id()
local lwsProc = process.list[lws]
local watchMouseDragging = false
local mouseStartX = nil
local mouseStartY = nil
local mouseDragAction = nil
process.addHook({"key", 61})
process.addHook({"key", 62})
process.addHook({"mouse_click"})
process.addHook({"mouse_drag"})
process.addHook({"mouse_scroll"})

while true do
	local event = {os.pullEventRaw()}
	if event[1] == "key" and event[2] == 61 then
		if process.focusWindow and process.list[process.focusWindow] then
			process.queueEvent(process.id(), "select_window")
		end
	elseif event[1] == "key" and event[2] == 62 then
		if process.focusWindow and process.list[process.focusWindow] then
			process.queueEvent(process.id(), "window_action", process.focusWindow, processTable[process.focusWindow].window)
		end
	elseif event[1] == "mouse_click" then
		watchMouseDragging = false
		local windowFound = false
		for i = #process.windowCompositor.bufferStack, 1, -1 do
			for pID, proc in pairs(process.list) do
				for j = 1, #proc.windows do
					if proc.windows[j].target.buffer == process.windowCompositor.bufferStack[i] and not proc.windows[j].minimized then
						--correct window in order, break even if we don't get the click here.
						local win = proc.windows[j]
						if event[3] >= win.x and event[3] <= win.x + win.w - 1 and event[4] >= win.y and event[4] <= win.y + win.h - 1 and not win.minimized then
							windowFound = true
							if process.focusWindow ~= pNum then
								process.focusWindow = pNum
								proc:toFront(win)
							end
							event[3] = event[3] - win.x
							event[4] = event[4] - win.y
							if event[3] > 0 and event[3] < win.w - 1 and event[4] > 0 and event[4] < win.h - 1 then
								--mouse click resume
								proc:resume(event)
							elseif event[4] == 0 and event[2] == 2 then
								--right click on window title bar, open window menu.
								lwsProc:queue("window_action", pNum, win)
							elseif (win.windowType == "modal" and event[4] == 0 and event[2] == 1 and win.w - event[3] == 3) or (win.windowType == "window" and event[4] == 0 and event[2] == 1 and win.w - event[3] > 2 and win.w - event[3] < 6) then
								local action = win.w - event[3] - 2
								if action == 1 then
									--close window
									lwsProc:queue("close_window", process.focusWindow)
								elseif action == 2 then
									if win.maximized then
										pInfo.window:restore()
										proc:queue("window_resize")
									else
										pInfo.window:maximize()
										proc:queue("window_resize")
									end
								elseif action == 3 then
									pInfo.window:minimize()
									proc:toBack()
								end
							elseif event[4] == 0 and event[2] == 1 and win.windowType ~= "menu" and not pInfo.special then
								--clicked on titlebar, set variables to see if we drag.
								watchMouseDragging = true
								mouseDragAction = "move"
								mouseStartX = event[3] + win.x
								mouseStartY = event[4] + win.y
							elseif event[3] == win.w - 1 and event[4] == win.h - 1 and event[2] == 1 and not pInfo.special then
								--clicked on lower right corner, resize.
								watchMouseDragging = true
								mouseDragAction = "resize"
								mouseStartX = event[3] + win.x
								mouseStartY = event[4] + win.y
							end
						end
						break
					end
				end
			end
			if windowFound then break end
		end
		if not windowFound then
			local desktop = process.getFromName("desktop")
			if desktop then
				--let desktop service handle this.
				desktop:resume(event)
			end
		end
	elseif event[1] == "mouse_drag" then
		--mouse is dragging, see if we need to do something with windows.
		if watchMouseDragging then
			local proc = process.list[process.focusWindow]
			if mouseDragAction == "move" then
				proc.windows[#proc.windows]:move(proc.windows[#proc.windows].x + (event[3] - mouseStartX), proc.windows[#proc.windows].y + (event[4] - mouseStartY))
				mouseStartX = event[3]
				mouseStartY = event[4]
			elseif mouseDragAction == "resize" then
				proc.windows[#proc.windows]:resize(proc.windows[#proc.windows].w + (event[3] - mouseStartX), proc.windows[#proc.windows].h + (event[4] - mouseStartY))
				mouseStartX = event[3]
				mouseStartY = event[4]
				proc.windows[#proc.windows].maximized = false
				proc:queue("window_resize")
			end
		elseif process.list[process.focusWindow] and process.list[process.focusWindow].window then
			local proc = process.list[process.focusWindow]
			event[3] = event[3] - proc.windows[#proc.windows].x
			event[4] = event[4] - proc.windows[#proc.windows].y
			if event[3] > 0 and event[3] < proc.windows[#proc.windows].w - 1 and event[4] > 0 and event[4] < proc.windows[#proc.windows].h - 1 then
				proc:resume(event)
			end
		elseif desktop then
			--fall through to desktop
			process.resume(desktop, event)
		end
	elseif event[1] == "mouse_scroll" then
		if process.list[process.focusWindow] and process.list[process.focusWindow].window then
			local proc = process.list[process.focusWindow]
			event[3] = event[3] - proc.windows[#proc.windows].x
			event[4] = event[4] - proc.windows[#proc.windows].y
			if event[3] > 0 and event[3] < proc.windows[#proc.windows].w - 1 and event[4] > 0 and event[4] < proc.windows[#proc.windows].h - 1 then
				proc:resume(event)
			end
		elseif desktop then
			--fall through to desktop
			process.resume(desktop, event)
		end
	elseif event[1] == "window_action" then
		process.new(function() windowAction(event[2], event[3]) end, "lwsa")
	elseif event[1] == "select_window" then
		process.new(windowSelect, "lwss")
	elseif event[1] == "close_window" then
		if process.list[event[2]] and process.list[event[2]].window then
			saveDimensions(process.list[event[2]])
			process.list[event[2]]:kill()
		end
	elseif event[1] == "service_stop" then
		process.removeHook({"key", 61})
		process.removeHook({"key", 62})
		process.removeHook({"mouse_click"})
		process.removeHook({"mouse_drag"})
		process.removeHook({"mouse_scroll"})
		return
	end
end
