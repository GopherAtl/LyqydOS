themes = {
	standard = {
		clean = {
			ul = {"+", "0", "f"},
			ur = {"+", "0", "f"},
			ll = {"+", "0", "f"},
			lr = {"+", "0", "f"},
			top = {"-", "0", "f"},
			bottom = {"-", "0", "f"},
			left = {"|", "0", "f"},
			right = {"|", "0", "f"},
			min = {"-", "0", "f"},
			max = {"-", "0", "f"},
			restore = {"-", "0", "f"},
			close = {"-", "e", "f"},
			caption = {"", "0", "f"},
			minPos = 0,
			maxPos = 0,
			closePos = 0,
			captionSize = {3, -3},
		},
		window = {
			ul = {"+", "0", "f"},
			ur = {"+", "0", "f"},
			ll = {"+", "0", "f"},
			lr = {"*", "0", "f"},
			top = {"-", "0", "f"},
			bottom = {"-", "0", "f"},
			left = {"|", "0", "f"},
			right = {"|", "0", "f"},
			min = {"_", "0", "f"},
			max = {"M", "0", "f"},
			restore = {"R", "0", "f"},
			close = {"X", "e", "f"},
			caption = {"", "0", "f"},
			minPos = -5,
			maxPos = -4,
			closePos = -3,
			captionSize = {3, -7},
		},
		menu = {
			ul = {"/", "0", "f"},
			ur = {"\\", "0", "f"},
			ll = {"\\", "0", "f"},
			lr = {"/", "0", "f"},
			top = {"-", "0", "f"},
			bottom = {"-", "0", "f"},
			left = {"|", "0", "f"},
			right = {"|", "0", "f"},
			min = {"-", "0", "f"},
			max = {"-", "0", "f"},
			restore = {"-", "0", "f"},
			close = {"-", "e", "f"},
			caption = {"", "0", "f"},
			minPos = 0,
			maxPos = 0,
			closePos = 0,
			captionSize = {3, -3},
		},
		modal = {
			ul = {"+", "0", "f"},
			ur = {"+", "0", "f"},
			ll = {"+", "0", "f"},
			lr = {"+", "0", "f"},
			top = {"-", "0", "f"},
			bottom = {"-", "0", "f"},
			left = {"|", "0", "f"},
			right = {"|", "0", "f"},
			min = {"-", "0", "f"},
			max = {"-", "0", "f"},
			restore = {"-", "0", "f"},
			close = {"X", "e", "f"},
			caption = {"", "0", "f"},
			minPos = 0,
			maxPos = 0,
			closePos = -3,
			captionSize = {3, -5},
		},
	},
	pretty = {
		clean = {
			ul = {" ", "0", "8"},
			ur = {" ", "0", "8"},
			ll = {" ", "0", "8"},
			lr = {" ", "0", "8"},
			top = {" ", "0", "8"},
			bottom = {" ", "0", "8"},
			left = {" ", "0", "8"},
			right = {" ", "0", "8"},
			min = {" ", "0", "8"},
			max = {" ", "0", "8"},
			restore = {" ", "0", "8"},
			close = {" ", "0", "8"},
			caption = {"", "f", "8"},
			minPos = 0,
			maxPos = 0,
			closePos = 0,
			captionSize = {3, -3},
		},
		window = {
			ul = {" ", "0", "8"},
			ur = {" ", "0", "8"},
			ll = {" ", "0", "8"},
			lr = {"/", "7", "8"},
			top = {" ", "0", "8"},
			bottom = {" ", "0", "8"},
			left = {" ", "0", "8"},
			right = {" ", "0", "8"},
			min = {"-", "0", "9"},
			max = {"M", "0", "9"},
			restore = {"R", "0", "9"},
			close = {"X", "0", "e"},
			caption = {"", "f", "8"},
			minPos = -5,
			maxPos = -4,
			closePos = -3,
			captionSize = {3, -7},
		},
		menu = {
			ul = {" ", "0", "8"},
			ur = {" ", "0", "8"},
			ll = {" ", "0", "8"},
			lr = {" ", "0", "8"},
			top = {" ", "0", "8"},
			bottom = {" ", "0", "8"},
			left = {" ", "0", "8"},
			right = {" ", "0", "8"},
			min = {" ", "0", "8"},
			max = {" ", "0", "8"},
			restore = {" ", "0", "8"},
			close = {" ", "0", "8"},
			caption = {"", "f", "8"},
			minPos = 0,
			maxPos = 0,
			closePos = 0,
			captionSize = {3, -3},
		},
		modal = {
			ul = {" ", "0", "8"},
			ur = {" ", "0", "8"},
			ll = {" ", "0", "8"},
			lr = {" ", "0", "8"},
			top = {" ", "0", "8"},
			bottom = {" ", "0", "8"},
			left = {" ", "0", "8"},
			right = {" ", "0", "8"},
			min = {" ", "0", "8"},
			max = {" ", "0", "8"},
			restore = {" ", "0", "8"},
			close = {"X", "0", "e"},
			caption = {"", "f", "8"},
			minPos = 0,
			maxPos = 0,
			closePos = -3,
			captionSize = {3, -5},
		},
	},
}

local Window = {
	draw = function(self, mode)
		--render window to table
		local maxX, maxY = self.target.getSize()
		local outputBuffer = {text = {}, textColor = {}, backColor = {}}
		local function findBoundaries(position)
			local first, second
			if position < 0 then
				first = maxX - (maxX - (self.x + self.w)) - (math.abs(position) - 1) - 2
				second = maxX - (maxX - (self.x + self.w)) - (math.abs(position) - 1)
			elseif position > 0 then
				first = self.x + position - 2
				second = self.x + position
			end
			return first, second
		end
		local function drawDecoration(decoration, position, line)
			local len, start = findBoundaries(position)
			if len and start then
				outputBuffer.text[line] = string.sub(outputBuffer.text[line], 1, len)..decoration[1]..string.sub(outputBuffer.text[line], start)
				outputBuffer.textColor[line] = string.sub(outputBuffer.textColor[line], 1, len)..decoration[2]..string.sub(outputBuffer.textColor[line], start)
				outputBuffer.backColor[line] = string.sub(outputBuffer.backColor[line], 1, len)..decoration[3]..string.sub(outputBuffer.backColor[line], start)
				return true
			else
				return false
			end
		end
		if mode ~= "cursor" then
			local prelineBuffer = self.x - 1
			local postlineBuffer = maxX - (self.x + self.w - 1)
			for i=1, maxY do
				if i == self.y and not self.fullscreened then
					outputBuffer.text[i] = string.rep(" ", prelineBuffer)..self.decorations.ul[1]..string.rep(self.decorations.top[1], self.w - 2)..self.decorations.ur[1]..string.rep(" ", postlineBuffer)
					outputBuffer.textColor[i] = string.rep("0", prelineBuffer)..self.decorations.ul[2]..string.rep(self.decorations.top[2], self.w - 2)..self.decorations.ur[2]..string.rep("0", postlineBuffer)
					outputBuffer.backColor[i] = string.rep("f", prelineBuffer)..self.decorations.ul[3]..string.rep(self.decorations.top[3], self.w - 2)..self.decorations.ur[3]..string.rep("f", postlineBuffer)
					if self.caption then
						local captionLength = self.w - (self.decorations.captionSize[1] - 1) - (math.abs(self.decorations.captionSize[2]) - 1)
						local caption = string.sub(self.caption, 1, captionLength)
						local preCapSize = self.x + self.decorations.captionSize[1] - 2
						local postCapStart = maxX - (maxX - (self.x + self.w)) - (math.abs(self.decorations.captionSize[2]) - 1)
						outputBuffer.text[i] = string.sub(outputBuffer.text[i], 1, preCapSize)..caption..string.rep(self.decorations.top[1], captionLength - #caption)..string.sub(outputBuffer.text[i], postCapStart)
						outputBuffer.textColor[i] = string.sub(outputBuffer.textColor[i], 1, preCapSize)..string.rep(self.decorations.caption[2], #caption)..string.rep(self.decorations.top[2], captionLength - #caption)..string.sub(outputBuffer.textColor[i], postCapStart)
						outputBuffer.backColor[i] = string.sub(outputBuffer.backColor[i], 1, preCapSize)..string.rep(self.decorations.caption[3], #caption)..string.rep(self.decorations.top[3], captionLength - #caption)..string.sub(outputBuffer.backColor[i], postCapStart)
					end
					if self.windowType == "modal" or self.windowType == "window" then
						if not drawDecoration(self.decorations.close, self.decorations.closePos, i) then
							--invalid decoration, set theme and exit
							self:setTheme("standard")
							return self:draw()
						end
						
						if self.windowType == "window" then
							if not drawDecoration(self.decorations.min, self.decorations.minPos, i) then
								--invalid decoration, set theme and exit
								self:setTheme("standard")
								return self:draw()
							end
							if not drawDecoration(self.maximized and self.decorations.restore or self.decorations.max, self.decorations.maxPos, i) then
								--invalid decoration, set theme and exit
								self:setTheme("standard")
								return self:draw()
							end
						end
					end
				elseif i == self.y + self.h - 1 and not self.fullscreened then
					outputBuffer.text[i] = string.rep(" ", prelineBuffer)..self.decorations.ll[1]..string.rep(self.decorations.bottom[1], self.w - 2)..self.decorations.lr[1]..string.rep(" ", postlineBuffer)
					outputBuffer.textColor[i] = string.rep("0", prelineBuffer)..self.decorations.ll[2]..string.rep(self.decorations.bottom[2], self.w - 2)..self.decorations.lr[2]..string.rep("0", postlineBuffer)
					outputBuffer.backColor[i] = string.rep("f", prelineBuffer)..self.decorations.ll[3]..string.rep(self.decorations.bottom[3], self.w - 2)..self.decorations.lr[3]..string.rep("f", postlineBuffer)
				elseif i >= self.y and i <= self.y + self.h - 1 then
					if self.fullscreened then
						outputBuffer.text[i] = self.redirect.buffer.text[i]
						outputBuffer.textColor[i] = self.redirect.buffer.textColor[i]
						outputBuffer.backColor[i] = self.redirect.buffer.backColor[i]
					else
						outputBuffer.text[i] = string.rep(" ", prelineBuffer)..self.decorations.left[1]..string.sub(self.redirect.buffer.text[i - self.y], 1, self.w - 2)..self.decorations.right[1]..string.rep(" ", postlineBuffer)
						--initial -1 means we don't catch the window decoration, final -1 for same reason (was 0 and -2 when we were catching the decorations.)
						outputBuffer.textColor[i] = string.rep("0", prelineBuffer)..self.decorations.left[2]..string.sub(self.redirect.buffer.textColor[i - self.y], 1, self.w - 2)..self.decorations.right[2]..string.rep("0", postlineBuffer)
						outputBuffer.backColor[i] = string.rep("f", prelineBuffer)..self.decorations.left[3]..string.sub(self.redirect.buffer.backColor[i - self.y], 1, self.w - 2)..self.decorations.right[3]..string.rep("f", postlineBuffer)
					end
				else
					outputBuffer.text[i] = string.rep(" ", maxX)
					outputBuffer.textColor[i] = string.rep("0", maxX)
					outputBuffer.backColor[i] = string.rep("f", maxX)
				end
			end

			local _old = term.redirect(self.target)
			local maxX, maxY = term.getSize()
			if not self.minimized then
				local isColor = term.isColor()
				outputBuffer.sizeX, outputBuffer.sizeY = maxX, maxY
				outputBuffer.color = isColor
				outputBuffer.cursorX, outputBuffer.cursorY = self.x + self.redirect.buffer.cursorX, self.y + self.redirect.buffer.cursorY
				outputBuffer.cursorBlink = self.redirect.buffer.cursorBlink
				outputBuffer.curTextColor = self.redirect.buffer.curTextColor
				outputBuffer.curBackColor = self.redirect.buffer.curTextColor
				if self.target.setBounds then self.target.setBounds(self.x, self.y, self.x + self.w - 1, self.y + self.h - 1) end
			else
				for i=1, maxY do
					outputBuffer = {text = {}, textColor = {}, backColor = {}, cursorX = 1, cursorY = 1, cursorBlink = false, curTextColor = "0", curBackColor = "f", sizeX = maxX, sizeY = maxY}
					outputBuffer.text[i] = string.rep(" ", maxX)
					outputBuffer.textColor[i] = string.rep("0", maxX)
					outputBuffer.backColor[i] = string.rep("f", maxX)
				end
				if self.target.setBounds then self.target.setBounds(0, 0, 0, 0) end
			end
			if not self.target.render then
				framebuffer.draw(outputBuffer)
			else
				self.target.render(outputBuffer)
				term.setCursorPos(outputBuffer.cursorX, outputBuffer.cursorY)
				term.setCursorBlink(outputBuffer.cursorBlink)
				term.setTextColor(2 ^ tonumber(outputBuffer.curTextColor, 16))
			end
			if _old then
				term.redirect(_old)
			else
				term.restore()
			end
		else
			local _old = term.redirect(self.target)
			term.setCursorPos(outputBuffer.cursorX, outputBuffer.cursorY)
			term.setCursorBlink(outputBuffer.cursorBlink)
			term.setTextColor(2 ^ tonumber(outputBuffer.curTextColor, 16))
			if _old then
				term.redirect(_old)
			else
				term.restore()
			end
		end
	end,
	move = function(self, x, y)
		if not self.movable then return nil, "not movable" end
		if x and y then
			local xlim, ylim = self.target.getSize()
			if (x < 1 or x + self.w - 1 > xlim) and (y < 1 or y + self.h - 1 > ylim) then
				return nil, "location out of bounds"
			end
			if x >= 1 and x + self.w - 1 <= xlim then
				self.x = x
			end
			if y >= 1 and y + self.h - 1 <= ylim then
				self.y = y
			end
			self:draw()
			return true
		else
			return nil, "must specify x and y"
		end
	end,
	resize = function(self, w, h)
		if not self.resizable then return nil, "not resizable" end
		if w and h then
			local w = tonumber(w)
			local h = tonumber(h)
			local xlim, ylim = self.target.getSize()
			if self.x + w - 1 > xlim or self.y + h - 1 > ylim then
				return nil, "window sized out of bounds"
			end
			self.redirect.buffer.sizeX = w - 2
			self.redirect.buffer.sizeY = h - 2
			if w >= 5 and h >= 3 then
				--adjust buffer horizontal size, but don't bother adjusting things below the new window bottom if smaller
				if w < self.w then
					for i=1, math.min(#self.redirect.buffer.text, math.max(self.h, h) - 2) do
						--w less two because the window border is part of the size, but not the buffer.
						self.redirect.buffer.text[i] = string.sub(self.redirect.buffer.text[i],1,w - 2)
						self.redirect.buffer.textColor[i] = string.sub(self.redirect.buffer.textColor[i],1,w - 2)
						self.redirect.buffer.backColor[i] = string.sub(self.redirect.buffer.backColor[i],1,w - 2)
					end
				elseif w > self.w then
					for i=1, math.min(#self.redirect.buffer.text, math.max(self.h, h) - 2) do
						--no need for width subtractions, since we are adjusting based on the difference between the two.
						self.redirect.buffer.text[i] = self.redirect.buffer.text[i]..string.rep(" ", w - self.w)
						self.redirect.buffer.textColor[i] = self.redirect.buffer.textColor[i]..string.rep(self.redirect.buffer.curTextColor, w - self.w)
						self.redirect.buffer.backColor[i] = self.redirect.buffer.backColor[i]..string.rep(self.redirect.buffer.curBackColor, w - self.w)
					end
				end
				self.w = w
				if h < self.h then
					repeat
					--remove the last entry to trim the buffer.
					table.remove(self.redirect.buffer.text)
					table.remove(self.redirect.buffer.textColor)
					table.remove(self.redirect.buffer.backColor)
					until #self.redirect.buffer.text == h - 2
				elseif h > self.h then
					repeat
						table.insert(self.redirect.buffer.text, string.rep(" ", self.w - 2))
						table.insert(self.redirect.buffer.textColor, string.rep(self.redirect.buffer.curTextColor, self.w - 2))
						table.insert(self.redirect.buffer.backColor, string.rep(self.redirect.buffer.curBackColor, self.w - 2))
					until #self.redirect.buffer.text == h - 2
				end
				self.h = h
				self:draw()
				return true
			else
				return nil, "size too small"
			end
		else
			return nil, "must specify width and height"
		end
	end,
	destroy = function(self)
		if process and process.windowCompositor then
			process.windowCompositor:removeBuffer(self.target.buffer)
		end
	end,
	setTheme = function(self, theme)
		if not theme then
			return nil, "Invalid theme"
		elseif type(theme) == "string" then
			if themes[theme] and themes[theme][self.windowType] then
				self.theme = theme
				for k,v in pairs(themes[theme][self.windowType]) do
					self.decorations[k] = v
				end
			else
				return nil, "Invalid theme"
			end
		end
		self:draw()
	end,
	setDecorations = function(self, decoration)
		if not decoration then
			return nil, "Invalid decoration"
		elseif type(decoration) == "table" then
			for k,v in pairs(window.themes.standard.window) do
				--check for completeness.
				if type(decoration[k]) ~= "table" or #decoration[k] < 3 then
					return nil, "Invalid decoration"
				end
			end
			for k,v in pairs(decoration) do
				self.decorations[k] = v
			end
		else
			return nil, "Invalid decoration"
		end
		self:draw()
	end,
	maximize = function(self)
		self.normalSize = {x = self.x, y = self.y, w = self.w, h = self.h}
		self:move(1, 1)
		self.maximized = true
		self:resize(self.target.getSize())
	end,
	minimize = function(self)
		self.minimized = true
		self:draw()
	end,
	fullscreen = function(self)
		self:minimize()
		self.fullscreened = true
		self.normalRedirect = self.redirect
		self.redirect = self.target
	end,
	unMinimize = function(self)
		self.minimized = false
		self:draw()
	end,
	restore = function(self)
		self.maximized = false
		if self.fullscreened then
			self:unMinimize()
			self.fullscreened = false
			self.redirect = self.normalRedirect
		end
		self:resize(self.normalSize.w, self.normalSize.h)
		self:move(self.normalSize.x, self.normalSize.y)
		self.normalSize = nil
	end,
	setType = function(self, winType)
		self.windowType = winType
		self:setTheme(self.theme)
		self:draw()
	end,
	setCaption = function(self, text)
		self.caption = text
		self:draw()
	end,
}

local wmetatable = {
	__index = Window,
}

function new(w, h, x, y, caption, target)
	local win = {
		target = target or (type(term.native) == "function" and term.current() or term.native),
		w = tonumber(w) or 19,
		h = tonumber(h) or 8,
		x = tonumber(x) or 1,
		y = tonumber(y) or 1,
		caption = caption or nil,
		--windowType: clean, standard, modal
		--clean is normal window, standard includes _MX controls, modal includes X control only.
		windowType = "clean",
		theme = "standard",
		decorations = {
			ul = {"+", "0", "f"},
			ur = {"+", "0", "f"},
			ll = {"+", "0", "f"},
			lr = {"+", "0", "f"},
			top = {"-", "0", "f"},
			bottom = {"-", "0", "f"},
			left = {"|", "0", "f"},
			right = {"|", "0", "f"},
			min = {"-", "0", "f"},
			max = {"-", "0", "f"},
			restore = {"-", "0", "f"},
			close = {"-", "e", "f"},
			caption = {"", "0", "f"},
			minPos = 0,
			maxPos = 0,
			closePos = 0,
			captionSize = {3, -3},
		},
		maximized = false,
		minimized = false,
		fullscreened = false,
		resizable = true,
		movable = true,
	}
	if win.target.setBounds then win.target.setBounds(win.x, win.y, win.x + win.w - 1, win.y + win.h - 1) end
	local xlim, ylim = win.target.getSize()
	--x and y bounding for initial window.
	if win.x < 1 then
		win.x = 1
	elseif win.x + win.w - 1 > xlim then
		win.x = xlim - win.w + 1
	end
	if win.y < 1 then
		win.y = 1
	elseif win.y + win.h - 1 > ylim then
		win.y = ylim - win.h + 1
	end
	local _redirect = framebuffer.new(w - 2, h - 2, target.isColor())
	win.redirect = {}
	for k, v in pairs(_redirect) do
		if type(k) == "string" and type(v) == "function" then
			win.redirect[k] = function(...)
				local result = {_redirect[k](...)}
				win:draw()
				return unpack(result)
			end
		else
			win.redirect[k] = _redirect[k]
		end
	end
	setmetatable( win, wmetatable )
	return win
end

function active()
	return process and process.id() and process.getWindow()
end

--compatibility with CC 1.6 window API.
function create(parent, x, y, width, height, visible)
	local win = window.new(width, height, x, y, "", parent)
	if not visible then
		win:minimize()
	end
	win.redirect.setVisible = function(b)
		if b then
			win:unMinimize()
		else
			win:minimize()
		end
	end
	win.redirect.redraw = function()
		win:draw()
	end
	win.redirect.restoreCursor = function()
		win:draw("cursor")
	end
	win.redirect.getPosition = function()
		return win.x, win.y
	end
	win.redirect.reposition = function(x, y, w, h)
		local min = win.minimized
		win:minimize()
		win:resize(w, h)
		win:move(x, y)
		if not min then
			win:unMinimize()
		end
	end
	return win.redirect
end
